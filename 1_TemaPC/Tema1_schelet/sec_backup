#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <dirent.h>
#include <errno.h>
#include <math.h>
#include "lib.h"

#define HOST "127.0.0.1"
#define PORT 10001

/*  
	global variable which tells what kind of check is required:
	 -> 0 for no check (default)
	 -> 1 for parity check
	 -> 2 for Hamming check
*/
int mode = 0;

int parseMsg(msg message){
	if(mode != 2){
		if(message.payload[mode] == 'l')return 1;
			else if(message.payload[mode] == 'c' && message.payload[mode + 1] == 'd')return 2;
				else if(message.payload[mode] == 'c' && message.payload[mode + 1] == 'p') return 3;
					else if(message.payload[mode] == 's') return 4;
						else if(strcmp("exit exit",message.payload + mode) == 0) return 0;
	}
	return 5;
}

int countFiles(DIR* dirStream){
	struct dirent* dirContents = readdir(dirStream);
	int counter = 0;
	while(dirContents){
		counter++;
		dirContents = readdir(dirStream);
	}
	return counter;
}

long getSizeOfFile(char* name){
	FILE* fileStream = fopen(name, "r");
	fseek(fileStream, 0L, SEEK_END);
	int aux = ftell(fileStream);
	fclose(fileStream);
	return aux;
}

void intToString(int x, char* string){
	int j, i = 0;
	while(x > 0){
		string[i] = x % 10 + 48;	
		i++;
		x /= 10;
	}
	char aux;
	for(j = 0; j < i / 2; j++){
		aux = string[j];
		string[j] = string[i - j - 1];
		string[i - j - 1] = aux;
	}
	string[i] = '\0';
}

void longToString(long x, char* string){
	int j, i = 0;
	while(x > 0){
		string[i] = x % 10 + 48;	
		i++;
		x /= 10;
	}
	char aux;
	for(j = 0; j < i / 2; j++){
		aux = string[j];
		string[j] = string[i - j - 1];
		string[i - j - 1] = aux;
	}
	string[i] = '\0';
}

char getParity(char* package, size_t size){
	char parity = 0;
	int i, n = (int) size, count = 0;
	// printf("\n size: %i\n", n);
	for(i = 0; i < n; i++){
		// printf("%c [%i], size: %i\n", package[i], aux, (int) sizeof(package[i]));
		count = 0;
		int b;
		for(b = 0x80; b && count < 1400; b >>= 1){
			if((package[i] & b) != 0) parity = !parity;
			count++;
		}
		if(count > 1400){
			printf("Overflow!!!");
			return 2;
		}
	}
	// printf(" => Parity: %i\n", parity);
	return parity;
}

/* Creates a message containing the "ACK" string and sends it */
int sendACK(){
	msg message;
	memcpy(message.payload, "ACK", 3);
	message.payload[3] = '\0';
	message.len = 4;
	int res = send_message(&message);
	if(res < 0){
		perror("ACK send error");
		return -1;
	}
	return 0;
}
/* Creates a message containing the "NACK" string and sends it */
int sendNACK(){
	msg message;
	memcpy(message.payload, "NACK", 4);
	message.payload[4] = '\0';
	message.len = 5;
	int res = send_message(&message);
	if(res < 0){
		perror("ACK send error");
		return -1;
	}
	return 0;
}

int receiveMessage(msg* message){
	int ok = 0;
	switch(mode){
		case 0:
			if(recv_message(message) < 0){
				perror("Receive error. Exiting.\n");
				return -1;
			}
			/* send ACK */
			if(sendACK() < 0) return -1;
		break;
		case 1:
			/* receives a messege, checks its parity and if it is wrong then sends a NACK and asks for a resend*/
			do{
				ok = 1;
				if(recv_message(message) < 0){
					perror("Receive error. Exiting.\n");
					return -1;
				}
				if(message->payload[0] != getParity(message->payload + 1, message->len - 1)){
					printf("Sending NACK\n");
					ok = 0;
					/* send NACK */
					if(sendNACK() < 0) return -1;
				}
			}while(!ok);
			/* send ACK */
			if(sendACK() < 0) return -1;
		break;

		case 2:
			printf("\n\nHamming not yet implemented\n\n");
		break;
	}
	return 0;
}

/* Tries to send a message until receives "ACK" or reaches 500 attempts. */
int sendMessage(char* content, size_t size){
	int count = 0, max_attempts = 500;
	msg message, confirmation;
	/* create the package accordingly with the mode */
	if(mode == 0){
		message.len = (int) size;
		memcpy(message.payload, content, message.len);
		message.payload[message.len] = '\0';
	}
	else if(mode == 1){
		// printf("Content: %s [%i]\n", content, (int)strlen(content) + 1);
		message.len = (int) size + 1;
		memcpy(message.payload + 1, content, message.len - 1);
		message.payload[0] = getParity(content, size);
		message.payload[message.len] = '\0';
		printf("ready to send name of file: %s of len: %i\n", message.payload + 1, message.len);
		// printf("sending: %s, len: %i, parity: %c\n", message.payload + 1, message.len, message.payload[0]);
	}

	do{
		if(send_message(&message) < 0){
			perror("Sending error. Exiting.\n");
			return -1;
		}
		if(recv_message(&confirmation) < 0){
			perror("Receive error. Exiting.\n");
			return -1;
		}
		// printf("received [%s] len: [%i] ", confirmation.payload, confirmation.len);
		count++;
	}while(confirmation.len == 5 && count < max_attempts);
	if(count == max_attempts){
		printf("Message sending timed out. Exiting\n");
		return -1;
	} else printf("Message sent.\n");
	return 0;
}

int ls(char* name){
	int num_files = 0;
	char converted[255];
	/* count number of files */
	printf("Name of folder: %s\n", name);
	DIR* dirStream = opendir(name);
	if(dirStream == NULL){
		printf("Directory open error!\n");
		return -1;
	}
	num_files = countFiles(dirStream);
	intToString(num_files, converted);
	printf("Nr fisiere: %s [%i] should be: %i\n", converted, (int) strlen(converted), num_files);
	/* send number of files */
	if(sendMessage(converted, strlen(converted)) < 0) return -1;
	// printf("\nCheck sending msg: %s\n", r.payload);
	/* itereate through files, send them one by one and wait for ACK after each send*/
	dirStream = opendir(name);
	struct dirent* dirContents = readdir(dirStream);
	if(dirContents == NULL)printf(">>>Read directory error!<<<");
	int aux = 0;
	while(aux < num_files){
		aux++;
		/* send file name */
		printf("[ls] %s || ", dirContents->d_name);
		if(sendMessage(dirContents->d_name, sizeof(dirContents->d_name)) < 0)return -1;
		dirContents = readdir(dirStream);
	}
	printf("\n");
	closedir(dirStream);
	return 0;
}

int cp(char* name){
	int bufferSize = 0;
	if(mode == 0) bufferSize = 1400;
	else if(mode == 1) bufferSize = 1399;
	else if(mode == 2) bufferSize = 700;

	printf("file to copy: %s\n", name);
	char buffer[1401], converted[255];
	int readFileDescriptor = open(name, O_RDONLY);
	long fileSize = getSizeOfFile(name);
	printf("Test file size: %li\n", fileSize);
	longToString(fileSize, converted);
	/* send size of file */
	if(sendMessage(converted, strlen(converted)) < 0) return -1;
	printf("TEST\n");
	int aux = read(readFileDescriptor, buffer, bufferSize);
	while(aux != 0){
		printf(" [cp] sending size: %i", aux);
		/* send piece of file */
		if(sendMessage(buffer, aux) < 0) return -1;
		aux = read(readFileDescriptor, buffer, aux);
		// if(aux > 0) buffer[aux] = '\0'; // <<<<<<< safety measure, try to remove
	}
	close(readFileDescriptor);
	return 0;
}

int sn(char* name){
	msg r;
	int fileSize;
	char newName[1405] = "new_";
	strcat(newName, name);
	int writeFileDescriptor = open(newName, O_CREAT|O_WRONLY|O_TRUNC, 0766);

	/* Receive file size. */
	if(receiveMessage(&r) < 0) return -1;
	if(mode == 0)
		fileSize = atoi(r.payload);
	else if(mode == 1)
		fileSize = atoi(r.payload + 1);
	printf("Test received file size: %i\n", fileSize);

	long counter = 0;
	while(counter < fileSize){
		/* Receive file piece. */
		if(receiveMessage(&r) < 0) return -1;
		if(mode == 0){
			write(writeFileDescriptor, r.payload, r.len);
			counter += r.len;
		} else if(mode == 1){
			write(writeFileDescriptor, r.payload + 1, r.len - 1);
			counter += r.len - 1;		
		}
	}
	printf("New file size: %li\n", counter);
	return 0;
}

int main(int argc, char* argv[])
{
	msg r;
	int i;
	char name[1401];
	printf("[RECEIVER] Starting.\n");
	init(HOST, PORT);

	if(argc == 2){
		if(strcmp(argv[1], "parity") == 0) mode = 1;
		else if(strcmp(argv[1], "hamming") == 0) mode = 2;
		else{
			printf("Check mode error. Exiting.");
			return -1;
		}
	}else mode = 0;

	printf("Mode: %i\n", mode);
	for (i = 0; i < COUNT; i++) {
		memset(&r, 0, sizeof(msg));

		/* recieve a command */
		if(receiveMessage(&r) < 0) return -1;

		/* find out what command has been received */
		int ch = parseMsg(r);
		switch(ch){
			case 1: // received ls command
				printf("\n\t\t\t\t\t\t\t[list files]\n");
				if(mode == 0) memcpy(name, r.payload + 3,r.len);
				else if(mode == 1) memcpy(name, r.payload + 4, r.len);
				if(strcmp(name,".") == 0){
					getcwd(name, 255 * sizeof(char));
				}
				ls(name);
				break;

			case 2:
				printf("\n\t\t\t\t\t\t\t[change directory]\n");			
				if(mode == 0)memcpy(name, r.payload + 3, r.len);
				else if(mode == 1)memcpy(name, r.payload + 4, r.len);
				if(chdir(name) != 0) printf("change directory error: \n%i\t", errno);
				printf("Test: %s\n", getcwd(name, 255 * sizeof(char)));
				break;

			case 3:
				printf("\n\t\t\t\t\t\t\t[copy]\n");
				if(mode == 0) cp(r.payload + 3);
				else if(mode == 1) cp(r.payload + 4);
				break;

			case 4:
				printf("\n\t\t\t\t\t\t\t[write new file]\n");
				if(mode == 0) sn(r.payload + 3);
				else if(mode == 1) sn(r.payload + 4);				
				break;

			case 5:
				printf("Command error. Exiting.\n");
				return 0;

			case 0:
				if(sendACK() < 0) return -1;
				printf("\nExit\n");
				return 0;
		}
	}

	printf("[RECEIVER] Finished receiving..\n");
	return 0;
}
